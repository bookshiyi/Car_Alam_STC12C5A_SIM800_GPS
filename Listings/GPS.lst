C51 COMPILER V9.00   GPS                                                                   05/20/2018 17:40:15 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE GPS
OBJECT MODULE PLACED IN .\Objects\GPS.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Keil_v5_C51\C51\BIN\C51.EXE GPS.c LARGE OPTIMIZE(7,SPEED) BROWSE DEBUG OBJEC
                    -TEXTEND PRINT(.\Listings\GPS.lst) TABS(2) OBJECT(.\Objects\GPS.obj)

line level    source

   1          #include "GPS.h"
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include "uart1.h"
   5          
   6          #include "devices.h"
   7          #include "delay.h"
   8          
   9          
  10          
  11          
  12          static uchar GetComma(uchar num,char* str);
  13          static void UTC2BTC(DATE_TIME *GPS);
  14          
  15          
  16          //-----------------------------------------------------------------------
  17          // 函  数: GPS_RMC_Parse(char *line,GPS_INFO *GPS)
  18          // 描  述: 分析处理$GPRMC数据帧，获得经纬度等GPS数据
  19          //***********************************************************************
  20          // 参  数:  
  21          //Input: num--个数;  *str --字符串
  22          //Output：返回num个','后的位置
  23          //***********************************************************************
  24          //$GPRMC,<1>,<2>,<3>,<4>,<5>,<6>,<7>,<8>,<9>,<10>,<11>,<12>*hh
  25          //<1> UTC 时间,hhmmss(时分秒)格式
  26          //<2> 定位状态，A=有效定位，V=无效定位
  27          //<3> 纬度ddmm.mmmm(度分)格式(前面的0 也将被传输)
  28          //<4> 纬度半球N(北半球)或S(南半球)
  29          //<5> 经度dddmm.mmmm(度分)格式(前面的0 也将被传输)
  30          //<6> 经度半球E(东经)或W(西经)
  31          //<7> 地面速率(000.0~999.9 节，前面的0 也将被传输)
  32          //<8> 地面航向(000.0~359.9 度，以真北为参考基准，前面的0 也将被传输)
  33          //<9> UTC 日期，ddmmyy(日月年)格式
  34          //<10> 磁偏角(000.0~180.0 度，前面的0 也将被传输)
  35          //<11> 磁偏角方向，E(东)或W(西)
  36          //<12> 模式指示(仅NMEA0183 3.00 版本输出，A=自主定位，D=差分，E=估算，N=数据无效)
  37          //-----------------------------------------------------------------------
  38          int GPS_RMC_Parse(char *line,GPS_INFO_TypDef *GPS)
  39          {
  40   1        uchar ch, status;
  41   1          
  42   1      ////////////////////  float lati_cent_tmp, lati_second_tmp;
  43   1      ////////////////////  float long_cent_tmp, long_second_tmp;
  44   1        char *buf = line;
  45   1        
  46   1        
  47   1        ES=0;
  48   1        
  49   1        ch = buf[5];            //$GPRMC---C
  50   1        status = buf[GetComma(2, buf)];
  51   1      
  52   1        if (ch == 'C')  //如果第五个字符是C，($GPRMC)       
  53   1        {
  54   2          if (status == 'A')  //如果数据有效，则分析      
C51 COMPILER V9.00   GPS                                                                   05/20/2018 17:40:15 PAGE 2   

  55   2          {
  56   3            GPS -> NS       = buf[GetComma(4, buf)];      // 纬度半球N(北半球)或S(南半球)
  57   3            GPS -> EW       = buf[GetComma(6, buf)];    // 经度半球E(东经)或W(西经)
  58   3            
  59   3                                                                
  60   3            GPS->latitude   = Get_Double_Number(&buf[GetComma(3, buf)]);    //纬度ddmm.mmmm(度分)
  61   3            GPS->longitude  = Get_Double_Number(&buf[GetComma(5, buf)]);  //经度dddmm.mmmm(度分)
  62   3            
  63   3            //转换为度的形式
  64   3            GPS->latitude = (int)(GPS->latitude/100) + (GPS->latitude/100.0 - (int)(GPS->latitude/100)) *100.0 / 60
             -.0;
  65   3            GPS->longitude = (int)(GPS->longitude/100) + (GPS->longitude/100.0 - (int)(GPS->longitude/100)) *100.0 
             -/ 60.0;
  66   3      
  67   3             //printf("lng = %f\r\n",GPS->longitude);//////////////////////////////////////////////////////////////
             -//////////////////
  68   3      //      sprintf(GPS->latitude_str, "%G", (double)resultlat); //产生字符串
  69   3      //      sprintf(GPS->longitude_str, "%g", (double)resultlng); //产生字符串
  70   3            ES=1;
  71   3            return 1;
  72   3          } 
  73   2        }
  74   1        ES=1;
  75   1        return 0;
  76   1      }
  77          
  78          
  79          
  80          static double Str_To_Double(char *buf)
  81          {
  82   1        double rev = 0;
  83   1        double dat;
  84   1        int integer = 1;
  85   1        char *str = buf;
  86   1        int i;
  87   1        while(*str != '\0')
  88   1        {
  89   2          switch(*str)
  90   2          {
  91   3            case '0':
  92   3              dat = 0;
  93   3              break;
  94   3            case '1':
  95   3              dat = 1;
  96   3              break;
  97   3            case '2':
  98   3              dat = 2;
  99   3              break;    
 100   3            case '3':
 101   3              dat = 3;
 102   3              break;
 103   3            case '4':
 104   3              dat = 4;
 105   3              break;
 106   3            case '5':
 107   3              dat = 5;
 108   3              break;
 109   3            case '6':
 110   3              dat = 6;
 111   3              break;
 112   3            case '7':
 113   3              dat = 7;
C51 COMPILER V9.00   GPS                                                                   05/20/2018 17:40:15 PAGE 3   

 114   3              break;
 115   3            case '8':
 116   3              dat = 8;
 117   3              break;
 118   3            case '9':
 119   3              dat = 9;
 120   3              break;
 121   3            case '.':
 122   3              dat = '.';
 123   3              break;
 124   3          }
 125   2          if(dat == '.')
 126   2          {
 127   3            integer = 0;
 128   3            i = 1;
 129   3            str ++;
 130   3            continue;
 131   3          }
 132   2          if( integer == 1 )
 133   2          {
 134   3            rev = rev * 10 + dat;
 135   3          }
 136   2          else
 137   2          {
 138   3            rev = rev + dat / (10 * i);
 139   3            i = i * 10 ;
 140   3          }
 141   2          str ++;
 142   2        }
 143   1        return rev;
 144   1      }
 145                                  
 146          //-----------------------------------------------------------------------
 147          // 函  数: double Get_Double_Number(char *s)
 148          // 描  述: 获得2个，之间的数据
 149          //***********************************************************************
 150          // 参  数:  
 151          //Input: 
 152          //Output：
 153          //-----------------------------------------------------------------------
 154          static double Get_Double_Number(char *s)
 155          {
 156   1        char buf[10];
 157   1        uchar i;
 158   1        double rev;
 159   1        i = GetComma(1, s);   //得到下一个，位置
 160   1        i = i - 1;
 161   1        strncpy(buf, s, i);     //获得2个，之间的数据
 162   1        buf[i] = 0;
 163   1        rev=Str_To_Double(buf); //数据转换
 164   1        return rev; 
 165   1      }
 166          
 167          
 168          //-----------------------------------------------------------------------
 169          // 函  数: uchar GetComma(uchar num,char *str)
 170          // 描  述: 查找num个“，”所在字符串的位置
 171          //***********************************************************************
 172          // 参  数:  
 173          //Input: num--个数;  *str --字符串
 174          //Output：返回num个','后的位置 
 175          //-----------------------------------------------------------------------
C51 COMPILER V9.00   GPS                                                                   05/20/2018 17:40:15 PAGE 4   

 176          static uchar GetComma(uchar num,char *str)
 177          {
 178   1        uchar i,j = 0;
 179   1        int len = strlen(str);
 180   1      
 181   1        for(i = 0;i < len;i ++)
 182   1        {
 183   2          if(str[i] == ',')
 184   2            j++;
 185   2          if(j == num)
 186   2            return i + 1; 
 187   2        }
 188   1      
 189   1        return 0; 
 190   1      }
 191          
 192          uchar gnrmc_handler(GPS_INFO_TypDef *GPS)
 193          {
 194   1            if (rev_stop)   //如果接收完一行
 195   1          {
 196   2              if (GPS_RMC_Parse(rev_buf, GPS)) ////////////////解析GPRMC
 197   2              {
 198   3                  gps_flag = 0;
 199   3                  rev_stop  = 0;
 200   3                return 1;
 201   3              }
 202   2              else
 203   2              {
 204   3                  gps_flag = 0;
 205   3                  rev_stop  = 0;
 206   3              }
 207   2          }
 208   1          return 0;
 209   1      }
 210          void GPS_Search()//gps搜星等待
 211          {
 212   1        GPS_INFO_TypDef gps_temp;
 213   1          while(!gnrmc_handler(&gps_temp))//持续搜索卫星
 214   1          {
 215   2            beep(20,1);
 216   2            UART_TC("正在搜索卫星...\r\n");
 217   2            delay_ms(1000);
 218   2          }
 219   1          UART_TC("――GPS定位成功――\r\n");
 220   1          beep(500,1);
 221   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1432    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =   ----      70
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
